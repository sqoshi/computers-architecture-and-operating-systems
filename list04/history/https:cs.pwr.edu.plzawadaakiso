[1]Marcin Zawada

   [2]logo
     * [3]Home
     * [4]Papers
     * [5]Teaching (in Polish)

Architektura komputerów i systemy operacyjne

     * Wykład:
          + Czwartek, godz. 13:15 D-1 309
          + Piątek, godz. 13:15 D-1 309
     * Laboratorium:
          + Poniedziałek, godz. 9:15 D-1 317.3
          + Poniedziałek, godz. 11:15 D-1 317.3
          + Poniedziałek, godz. 13:15 D-1 317.3
          + Czwartek, godz. 9:15 D-1 317.3

Zasady zaliczenia kursu

     * Zasady zaliczenia laboratorium: pod uwagę będą brane umiejętności
       nabyte w trakcie kursu oraz terminowość oddawania zadań.
     * Zasady zaliczenia ćwiczeń: kolokwia w tygodniach ≈47 roku 2019 oraz
       ≈3 roku 2020
          + Punktacja - na każdym kolokwium można zdobyć maks. 15pt +
            punkty za aktywność na ćwiczeniach
               o ocena 5.5 >=37pt
               o ocena 5.0 >=27pt <37pt
               o ocena 4.5 >=24pt <27pt
               o ocena 4.0 >=21pt <24pt
               o ocena 3.5 >=18pt <21pt
               o ocena 3.0 >=15pt <18pt
     * Egzamin
          + I termin: 4.02.2020 8:00 sala 322 A-1
          + II termin: 11.02.2020 8:00 sala 322 A-1
          + Punktacja
               o ocena 5.0 >=27pt
               o ocena 4.5 >=24pt <27pt
               o ocena 4.0 >=21pt <24pt
               o ocena 3.5 >=18pt <21pt
               o ocena 3.0 >=15pt <18pt
     * Ocena końcowa:
       if  (Ćwiczenia >= 3.0 && Laboratorium >= 3.0 && Egzamin >=3.0) then
       (0.3 * Ćwiczenia + 0.3 * Laboratorium + 0.4 * Egzamin) else 2.0

Wykłady

      Architektura komputerów    Systemy operacyjne

[6]Wykład 3.10.2019 i 4.10.2019

     * Historia procesorów (CPU)
          + [7]Intel 4004
          + [8]Visual 6502
          + [9]Visual ARM1
          + [10]Intel's 15 Most Unforgettable x86 CPUs
          + [11]The History Of Intel CPUs: Updated!
          + [12]RISC-V
          + [13]RISC-V is an alternative to proprietary designs
     * Historia procesorów graficznych (GPU)
          + [14]The History of Nvidia GPUs: NV1 to Turing
     * [15]TPU (Tensor Processing Unit)
          + [16]David Patterson Says It’s Time for New Computer
            Architectures and Software Languages
     * Historia komputerów
          + [17]krótka historia

     * Historia [18]Uniksa
          + [19]Klasyczna książka - kod źródłowy z komentarzami
          + [20]Kody źródłowe i podręczniki różnych wersji Uniksa
          + [21]Eric Steven Raymond - The Art of Unix Programming
          + Nowoczesna reimplementacja Uniksa V6 na procesory x86 i RISC-V
               o [22]strona projektu
               o [23]kod źródłowy projektu
               o [24]książka z kodem źródłowym
          + Historia rozwoju kodów źródłowych Uniksa w jednym (dużym)
            repozytorium git!!!
               o [25]Historia Uniksa
          + Archtektura systemu operacyjnego
               o [26]Tanenbaum–Torvalds debate

     * [27]Virtual x86 - emulacja komputera PC z możliwością uruchomienia
       różnych systemów operacyjnych
     * [28]Pierwszy emulator PC napisany w JavaScript przez Fabrice'a
       Bellard'a + [29]dane techniczne
     * [30]Emulacja różnych wersji systemów operacyjnych i nie tylko dla
       PC

[31]Wykład 10.10.2019

     * [32]Architektura komputera MARIE - [33]kod źródłowy symulatora
     * [34]Symulator MARIE - [35]źródła, [36]dokumentacja, [37]zbiór
       instrukcji, [38]ebook
     * [39]Reprezentacja liczb, systemy liczbowe, konwersja, arytmetyka
       binarna, kody uzupełnieniowe

[40]Wykład 11.10.2019

     * [41]Historia terminali VT
     * [42]Unix Operating System - Brian Kernighan
     * [43]Power Use of UNIX - Dan North
     * [44]Wprowadzenie oraz obsługa systemu plików
     * [45]Procesy w systemie operacyjnym
     * [46]The TTY demystified

[47]Wykład 17.10.2019

     * Algebra Boole'a
     * [48]George Boole, "Mathematical Analysis of Logic", [49]wersja
       zeskanowana
     * [50]Claude Shannon, "The Synthesis of Two Terminal Switching
       Circuits"

[51]Wykład 18.10.2019

     * [52]Filtry, strumienie standardowe oraz przetwarzanie potokowe
     * [53]Tworzenie skryptów powłoki systemu operacyjnego
     * [54]The Open Group Base Specifications Issue 7, IEEE Std
       1003.1™-2008, 2016 Edition
          + [55]Shell Command Language
          + [56]Wersja PDF specyfikacji (do pobrania z komputerów
            podpiętych do sieci PWR)
     * [57]AWK, [58]GREP, [59]SED i [60]INNE - dużo przykładów
       zastosowania
     * [61]Bash FAQ
          + [62]How can I use array variables?
          + [63]What is buffering? Or, why does my command line produce no
            output: tail -f logfile | grep 'foo bar' | awk ...
          + [64]How can I access positional parameters after $9?
          + [65]What is the difference between test, [ and [[ ?
          + [66]How can I print text in various colors?
          + [67]How do I use dialog to get input from the user?
          + [68]I saw this command somewhere: :(){ :|:& } (fork bomb). How
            does it work?
          + [69]Is there a "PAUSE" command in bash like there is in MSDOS
            batch scripts? To prompt the user to press any key to
            continue?
          + [70]Why is $(...) preferred over `...` (backticks)?
     * [71]Fixing Unix/Linux/POSIX Filenames: Control Characters (such as
       Newline), Leading Dashes, and Other Problems
     * [72]Bash Pitfalls

[73]Wykład 24.10.2019

     * [74]Siatki Karnaugh i minimalizacja funkcji boolowskich
     * [75]Karnaugh, Maurice "The Map Method for Synthesis of
       Combinational Logic Circuits"
     * [76]Algorytm minimalizacji Quine-McCluskey

[77]Wykład 25.10.2019

     * [78]Obsługa systemu plików
     * [79]Obsługa potoków
     * [80]Planowanie przydziału procesora
          + [81]Process scheduler - [82]Completely Fair Scheduler ,
            [83]The Linux Scheduler: a Decade of Wasted Cores (2016)
          + [84]I/O scheduling - [85]Completely Fair Queuing

[86]Wykład 7.11.2019

     * [87]Układy [88]kombinacyjne
     * Dodawanie [89]carry-select i [90]carry-lookahead
     * Hazard w układach kombinacyjnych
     * [91]Układy sekwencyjne: przerzutnik [92]SR, [93]D, [94]JK i [95]JK
       wyścigi
     * Rejestry, [96]pamięć
     * [97]Jednostka arytmetyczno-logiczna (ALU) - [98]projektowanie ALU
     * [99]Symulator układów logicznych
          + [100]Podstawowe bramki
          + [101]Półsumator
          + [102]Pełny sumator
          + [103]Przerzutnik D
          + [104]Rejestr 4-bitowy
          + [105]Inne przykłady

[106]Wykład 8.11.2019

     * [107]Obsługa procesów w systemie
     * [108]Procesy (grupy procesów, sesje)
     * [109]Linux PID, PPID, PGID (Process Group Leader), SID (Session
       Leader)
     * [110]Sygnały - [111]signal() vs sigaction()
     * [112]Advanced Programming in the UNIX Environment (książka),
       [113]wersja html
          + [114]I/O Efficiency
          + [115]Process Relationships
          + [116]Signals

Ćwiczenia

     * [117]Lista 1
     * [118]Lista 2
     * [119]Lista 3
     * [120]Lista 4
     * [121]Lista 5
     * [122]Lista 6

Laboratorium

Zasady zaliczenia laboratorium

     * Ocena z laboratorium bierze pod uwagę umiejętności nabyte w trakcie
       kursu oraz terminowość oddawania zadań
     * Rozwiązania zadań należy wysyłać w terminie na przydzielone konto
       SVN, poza pierwszą listą którą należy oddać w terminie
     * Rozwiązania zadań wysłane po danym terminie, ale do 1 tygodnia
       liczone są maks. za połowę punktów, po terminie 1 tygodnia liczone
       są za ZERO punktów
     * Zadania z gwiazdką można wysyłać bez straty punktów do tygodnia po
       terminie
     * Wysłane rozwiązania, należy oddać na laboratorium, bez straty
       punktów na pierwszych lub drugich zajęciach po terminie SVN, na
       trzecich zajęciach (bez usprawiedliwień) zadania liczone są maks.
       za połowę punktów na czwartych zajęciach zadania liczone są za ZERO
       punktów (nawet zadania wysłane w terminie na SVN)

Lista 1 (Lab) Termin oddania do [DEL: 13.10.2019 :DEL] 15.10.2019

   Prowadzący laboratorium pomogą na pierwszych zajęciach wykonać zadania.
   Następnie przy oddawaniu studenci wykonają samodzielnie wybrane z listy
   polecenia z każdego zadania.
    1. (2pt) Zainstaluj program do wirtualizacji [123]VirtualBox. Zapoznaj
       się z programem.
    2. (5pt) Zainstaluj w środowisku wirtualnym (VirtualBox) dystrybucję
       Linuksa [124]Ubuntu. Pobierz obraz systemu [125]tutaj. Naucz się
       podstawowych komend obsługi systemu z konsoli np. cd, ls, cat,
       less, apt-get itp.
    3. (8pt) Zainstaluj w środowisku wirtualnym (VirtualBox) dystrybucję
       Linuksa [126]Arch Linux. Pobierz obraz systemu [127]tutaj. Naucz
       się podstawowych informacji o systemie oraz umiej wytłumaczyć w
       kilku zdaniach co najmniej
          + Co to jest [128]BIOS oraz [129]UEFI?
          + Co to jest [130]GPT, [131]MBR?
          + Co to jest i jak obsługiwać program do robienia partycji dysku
            np. [132]fdisk? Wykonaj podstawowe polecenia programu
            samodzielnie w maszynie wirtualnej
          + Co to jest [133]system plików i jakie systemy plików
            wykorzystuje Linux?
       [134]Przykładowe instalacje Arch Linuksa i [135]instrukcja oraz
       instalacja w [136]VirtualBox

   Uwaga: Można wykorzystać też dowolny inny program do wirtualizacji
   zamiast programu VirtualBox np. QEMU, VMWare Player, ...

Lista 2 (Lab) Termin wysłania na [137]SVN do 20.10.2019

   Na SVN proszę wysłać tylko zadania 3, 4. Resztę zadań należy oddać na
   pierwszych (lub drugich) zajęciach po terminie 20.10.2019.
    1. (5pt) Uruchom poniższy program w symulatorze [138]MARIE (przełącz
       'Output mode' na 'UNICODE'). Wytłumacz przy oddawaniu jak on
       działa.

            CLEAR
            STORE INDEX
WHILE,      LOAD STR_BASE
            ADD INDEX
            STORE ADDR
            LOADI ADDR
            SKIPCOND 400
            JUMP DO
            JUMP END_WHILE
DO,         OUTPUT
            LOAD INDEX
            ADD ONE
            STORE INDEX
            JUMP WHILE
END_WHILE,  HALT
ONE,        DEC 1
INDEX,      DEC 0
ADDR,       HEX 0
STR_BASE,   HEX 13
STR,        DEC 72 / H
            DEC 69 / E
            DEC 76 / L
            DEC 76 / L
            DEC 79 / O
            DEC 13 /carriage return
            DEC 87 / W
            DEC 79 / O
            DEC 82 / R
            DEC 76 / L
            DEC 68 / D
NULL,       DEC 0


    2. (5pt) Uruchom poniższy program w symulatorze [139]MARIE (przełącz
       'Output mode' na 'DEC'). Wytłumacz przy oddawaniu jak on działa
       (źródła tego i innych przykładowych programów można znaleźć na
       stronie [140]https://github.com/mathewmariani/MARIE-Examples).

Cond,       LOAD        COUNT       / Load count into AC
            SUBT        TEN         / Remove 10 from count
            SKIPCOND    000         / Skipcond 000 if AC < 0
            JUMP        End         / End Loop

Loop,       LOAD        COUNT       / Load count into AC
            ADD         ONE         / Increment Count by 1
            STORE       COUNT       / Store AC in count
            JNS         Fibb
            JUMP        Cond        / Check loop conditions

Fibb,       HEX         000         / Store value for JNS
            CLEAR                   / AC = 0

            / Fi = F1 + F2
            ADD         F1          / AC + F1
            ADD         F2          / AC + F2
            STORE       Fi          / Fi = AC

            / F1 = F2
            LOAD        F2          / AC = F2
            STORE       F1          / F1 = AC

            / F2 = Fi
            LOAD        Fi          / AC = Fi
            STORE       F2          / F2 = AC

            / Quick Output
            LOAD        Fi          / AC = FI
            OUTPUT                  / Output AC

            JUMPI       Fibb

End,        HALT                    / Halt process

/ variables
COUNT,      DEC         0           / count for loop
Fi,         DEC         0
F1,         DEC         0
F2,         DEC         1

/ constant values
ZERO,       DEC         0
ONE,        DEC         1
TWO,        DEC         2
THREE,      DEC         3
FOUR,       DEC         4
FIVE,       DEC         5
SIX,        DEC         6
SEVEN,      DEC         7
EIGHT,      DEC         8
NINE,       DEC         9
TEN,        DEC         10


    3. (10pt) Wytłumacz jak wykonane jest mnożenie dla MARIE ([141]patrz
       przykład z symulatora). Korzystając z tego przykładu napisz
       dzielenie z resztą.
    4. (15pt)* Napisz program dla [142]MARIE, który wypisuje kolejne
       liczby pierwsze z podanego zakresu.

Lista 3 (Lab) Termin wysłania na [143]SVN do 27.10.2019

   Na SVN proszę wysłać tylko zadania 6 i 7. Resztę zadań należy oddać na
   pierwszych (lub drugich) zajęciach po terminie 27.10.2019.
    1. (5pt) Wytłumacz jakie pliki zawierają katalogi /dev oraz /proc.
       Wykorzystując polecenie dd odczytaj pierwszy sektor z dysku
       głównego (uwaga na prawa dostępu) lub podpiętego pendrive'a i
       wyświetl przez hexdump -C. Z katalogu proc wyświetl informacje o
       pamięci, procesorze i partycjach.
    2. (5pt) Zapoznaj się z programem ps (man ps). Naucz się posługiwać
       tym programem, aby umieć sprawdzać co najmniej istnienie i
       parametry wybranych procesów (PID procesu i rodzica, stan procesu,
       priorytet, nice, ilość pamięci, zużycie czasu procesora). Uruchom
       też kilka terminali pokaż jakie urządzenie tty wykorzystują.
       Wykonując komendę ps axjf pokaż wszystkie procesy które podpięte są
       do tych terminali (kolumna TTY).
    3. (5pt) Zapoznaj się z kompilatorem języka C (polecenie gcc) oraz
       języka C++ (polecenie g++). Uruchom poniższy program w języku C.

$ cat > test.c
#include <stdio.h>

int main(int argc, char *argv[])
{
    printf("Hello, World!\n");
    return 0;
}
^D
$ gcc -Wall -pedantic test.c
$ ./a.out


       Wytłumacz każdy z powyższych kroków. Co oznaczają opcje -Wall oraz
       -pedantic? Zobacz man gcc.
    4. (5pt) Pokaż na przykładzie (np. sleep 1000, sleep 1001, ...)
       zarządzanie zadaniami wykorzystując <polecenie> & - uruchamianie w
       tle (background) oraz jobs, fg, bg, kill oraz ^Z. Uruchom kilka
       zadań w tle i pokaż jak można nimi zarządzać, czyli zatrzymywać,
       wznawiać oraz kończyć ich działanie. Pokaż jak uruchomione zadanie
       (nie w tle), można w czasie działania uruchomić w tle np. wykonując
       komendę sleep 100 (bez &) w czasie działanie przełącz je do
       działania w tle.
    5. (5pt) Poleceniem mkfifo (man mkfifo) utwórz potok nazwany (ang.
       named FIFO). Wywołując polecenie cat w różnych terminalach spowoduj
       wpisywanie danych do potoku przez jeden(ne) proces(y), i
       odczytywanie i wyświetlanie ich przez inne. Zaobserwuj, kiedy
       polecenie cat czytające z potoku czeka na więcej danych, a kiedy
       kończy pracę. Analogicznie, kiedy czeka na więcej danych (z
       klawiatury) polecenie cat piszące do potoku?
    6. (8pt) Napisz program w języku C, który wykorzystując [144]sekwencje
       Esc (ang. escape sequences) standardu ANSI wyświetli na ekranie
       napis "Hello, World!", po kolei we wszystkich dostępnych przez
       terminal kolorach. Czy terminal może wyświetlić 256 kolorów?
    7. (10pt) Napisz potok poleceń (w skrypcie), który zamienia wszystkie
       nazwy plików w danym katalogu (bez podkatalogów) na małe litery,
       czyli wszystkie duże litery występujące w nazwach plików zostaną
       zamienione na małe, a małe litery pozostają oczywiście dalej małe.
       Skrypt powinien działać poprawnie na takich nazwach plików jak "
       ABC DEF", "-AbC aBc" i "--ABC DEF". Podane nazwy plików proszę
       zakładać w konsoli korzystając z polecenia touch.

   Przykład konwersji stron podręcznika man do formatu PDF:

$ man -t ps | ps2pdf - ps.pdf
$ man -t gcc | ps2pdf - gcc.pdf
$ # Dla czcionek 'Courier'
$ zcat $(man -w gcc) | groff -Tps -fC -mandoc | ps2pdf - "gcc.pdf"


   W przypadku braku programu ps2pdf, należy zainstalować pakiet
   ghostscript np. pod archlinuksem:

# pacman -S ghostscript


Lista 4 (Lab) Termin wysłania na [145]SVN do 10.11.2019

    1. (10pt) Napisz skrypt w Bashu, który co sekundę pokazuje następujące
       informacje o systemie
          + Aktualną i średnią prędkość przesyłania danych po interfejsach
            sieciowych (odczytaj i zinterpretuj /proc/net/dev oraz
            wyświetl w B, KB lub MB w zależność od aktualnej prędkości)
          + Jak długo system jest uruchomiony w dniach, godzinach,
            minutach i sekundach (/proc/uptime)
          + Aktualny stan baterii w procentach
            (/sys/class/power_supply/BAT0/uevent)
          + Obciążenie systemu /proc/loadavg
       Skrypt prezentuje "graficznie" historię poprzednich pomiarów np.
       prosty wykres słupkowy. Przykładowe programy z wykresami [146]s-tui
       lub [147]bmon. Można wykorzystać inne znaki w UTF-8. Zobacz też
       informacje o komendzie tput np. [148]link i/lub [149]link.
    2. (10pt) Napisz skrypt w Bashu, który pokazuje informacje o
       wszystkich procesach (podobne jak program ps). Wykorzystaj system
       plików procfs (standardowo w systemie Linux montowanym w katalogu
       /proc) do pobrania informacji o procesach np. cat /proc/1/status
       wyświetla informacje o procesie 1. Dodatkowo wyświetl informację
       ile proces ma otwartych plików.
    3. (10pt) Napisz skrypt w Bashu wykorzystujący [150]REST API do
       pobierania danych z dwóch przykładowych źródeł np. [151]Internet
       Chuck Norris Database (ICNDb) i [152]The Cat API. Do zapytań
       RESTowych wykorzystaj curl lub wget do parsowania JSONa wystarczy
       program jq (pacman -S jq), dla osób korzystających z formatu XML
       dostępny jest program xmllint (pacman -S libxml2). Po uruchomieniu
       skryptu na ekranie pokaż obraz z bazy 'The Cat API' wykorzystując
       np. program [153]img2txt (pacman -S libcaca) lub [154]catimg oraz
       poniżej wyświetl losowy cytat z bazy Chucka Norrisa.
    4. (10pt) Napisz skrypt w Bashu, który przechowuje historię zmian
       podanej strony z internetu i powiadamia użytkownika w momentach
       zmian na stronie (do powiadamiania można wykorzystać komendę
       xmessage, zenity lub echo z terminala i wyświetlić zmiany).
       Przykładowe wywołanie programu

$ ./webtrace.sh "http://ki.pwr.edu.pl" 600


       gdzie pierwszym parametrem jest adres śledzonej strony, a drugim
       parametrem jest czas w sekundach co jaki strona będzie pobierana i
       sprawdzana czy nastąpiła zmiana, czyli w powyższym przykładzie
       strona http://ki.pwr.edu.pl będzie sprawdzana co 10 minut.
       Wskazówka: Do pobrania strony można wykorzystać np. lynx -dump
       http://ki.pwr.edu.pl (man lynx, instalacja pacman -S lynx) lub
       links (man links, instalacja pacman -S links) lub w3m (man w3m,
       instalacja pacman -S w3m) lub ... . Do sprawdzania zmian na
       stronie: diff (man diff), ... . Do pamiętania historii można
       wykorzystać repozytorium git, instalacja pacman -S git.
    5. (10pt)* Celem tego zadania jest dokładniejsze poznanie ANSI escape
       sequences i obsługi terminali. Bazując np. na grze [155]arkanoid
       napisz prostą grę w tenisa [156]pong. Zrób tak aby gra
       dostosowywała się do wielkości terminala. Przetestuj program na
       różnych emulatorach terminali np. [157]xterm, [158]urxvt,
       [159]termite, [160]st, [161]gnome-terminal, [162]linux console
       [163]itp., czy są jakieś różnice?

   [164]HTML5 | [165]CSS

References

   1. http://cs.pwr.edu.pl/osoba.php?lang=eng&NICK=MZA
   2. http://www.pwr.edu.pl/
   3. https://cs.pwr.edu.pl/zawada/index.php
   4. https://cs.pwr.edu.pl/zawada/papers.php
   5. https://cs.pwr.edu.pl/zawada/teaching.php
   6. https://cs.pwr.edu.pl/zawada/akiso/download/20191003
   7. http://www.4004.com/
   8. http://visual6502.org/JSSim/index.html
   9. http://visual6502.org/sim/varm/armgl.html
  10. http://www.tomshardware.com/reviews/intel-cpu-history,1986.html
  11. https://www.tomshardware.com/picturestory/710-history-of-intel-cpus.html
  12. https://en.wikipedia.org/wiki/RISC-V
  13. https://www.economist.com/science-and-technology/2019/10/03/a-new-blueprint-for-microprocessors-challenges-the-industrys-giants
  14. https://www.tomshardware.com/picturestory/715-history-of-nvidia-gpus.html
  15. https://en.wikipedia.org/wiki/Tensor_processing_unit
  16. https://spectrum.ieee.org/view-from-the-valley/computing/hardware/david-patterson-says-its-time-for-new-computer-architectures-and-software-languages
  17. http://www.computerhistory.org/timeline/computers/
  18. http://pl.wikipedia.org/wiki/Unix
  19. http://v6.cuzuco.com/
  20. http://minnie.tuhs.org/cgi-bin/utree.pl
  21. http://www.catb.org/~esr/writings/taoup/html/
  22. http://pdos.csail.mit.edu/6.828/2019/xv6.html
  23. https://github.com/mit-pdos/xv6-public
  24. http://pdos.csail.mit.edu/6.828/2018/xv6/xv6-rev11.pdf
  25. https://github.com/dspinellis/unix-history-repo
  26. https://en.wikipedia.org/wiki/Tanenbaum–Torvalds_debate
  27. http://copy.sh/v86
  28. http://bellard.org/jslinux/
  29. http://bellard.org/jslinux/tech.html
  30. https://www.pcjs.org/
  31. https://cs.pwr.edu.pl/zawada/akiso/download/20191010
  32. http://computerscience.jbpub.com/ecoa/2e/
  33. http://computerscience.jbpub.com/ecoa/2e/downloads/MarieSim-v1.3.01.zip
  34. https://marie.js.org/
  35. https://github.com/MARIE-js/MARIE.js
  36. https://github.com/MARIE-js/MARIE.js/wiki
  37. https://github.com/MARIE-js/MARIE.js/wiki/MARIE-Instruction-Set-(with-Opcodes)
  38. https://marie.js.org/book.pdf
  39. http://wazniak.mimuw.edu.pl/index.php?title=WDP_Reprezentacja_liczb
  40. https://cs.pwr.edu.pl/zawada/akiso/download/20191011
  41. https://vt100.net/dec/vt_history.html
  42. https://youtu.be/tc4ROCJYbm0?t=249
  43. https://www.youtube.com/watch?v=7uwW20odwEk
  44. http://wazniak.mimuw.edu.pl/index.php?title=SOP_lab_nr_2
  45. http://wazniak.mimuw.edu.pl/index.php?title=SOP_lab_nr_3
  46. https://www.linusakesson.net/programming/tty/
  47. https://cs.pwr.edu.pl/zawada/akiso/download/20191017
  48. http://www.gutenberg.org/ebooks/36884
  49. https://archive.org/details/mathematicalanal01bool
  50. https://archive.org/details/bstj28-1-59
  51. https://cs.pwr.edu.pl/zawada/akiso/download/20191018
  52. http://wazniak.mimuw.edu.pl/index.php?title=SOP_lab_nr_4
  53. http://wazniak.mimuw.edu.pl/index.php?title=SOP_lab_nr_5
  54. http://pubs.opengroup.org/onlinepubs/9699919799/
  55. http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html
  56. http://ieeexplore.ieee.org/document/6506091/
  57. https://learnbyexample.gitbooks.io/command-line-text-processing/content/gnu_awk.html
  58. https://learnbyexample.gitbooks.io/command-line-text-processing/content/gnu_grep.html
  59. https://learnbyexample.gitbooks.io/command-line-text-processing/content/gnu_sed.html
  60. https://learnbyexample.gitbooks.io/command-line-text-processing/content/
  61. http://mywiki.wooledge.org/BashFAQ
  62. http://mywiki.wooledge.org/BashFAQ/005
  63. http://mywiki.wooledge.org/BashFAQ/009
  64. http://mywiki.wooledge.org/BashFAQ/025
  65. http://mywiki.wooledge.org/BashFAQ/031
  66. http://mywiki.wooledge.org/BashFAQ/037
  67. http://mywiki.wooledge.org/BashFAQ/040
  68. http://mywiki.wooledge.org/BashFAQ/059
  69. http://mywiki.wooledge.org/BashFAQ/065
  70. http://mywiki.wooledge.org/BashFAQ/082
  71. https://dwheeler.com/essays/fixing-unix-linux-filenames.html
  72. http://mywiki.wooledge.org/BashPitfalls
  73. https://cs.pwr.edu.pl/zawada/akiso/download/20191024
  74. https://en.wikipedia.org/wiki/Karnaugh_map
  75. https://dx.doi.org/10.1109/TCE.1953.6371932
  76. https://en.wikipedia.org/wiki/Quine–McCluskey_algorithm
  77. https://cs.pwr.edu.pl/zawada/akiso/download/20191025
  78. http://wazniak.mimuw.edu.pl/index.php?title=SOP_lab_nr_6
  79. http://wazniak.mimuw.edu.pl/index.php?title=SOP_lab_nr_8
  80. http://wazniak.mimuw.edu.pl/index.php?title=SO-1st-2.3-w3.tresc-1.0-toc
  81. https://en.wikipedia.org/wiki/Process_scheduler
  82. https://en.wikipedia.org/wiki/Completely_Fair_Scheduler
  83. http://www.ece.ubc.ca/~sasha/papers/eurosys16-final29.pdf
  84. https://en.wikipedia.org/wiki/I/O_scheduling
  85. https://en.wikipedia.org/wiki/CFQ
  86. https://cs.pwr.edu.pl/zawada/akiso/download/20191107
  87. https://en.wikipedia.org/wiki/Logic_gate
  88. https://en.wikipedia.org/wiki/Combinational_logic
  89. https://en.wikipedia.org/wiki/Carry-select_adder
  90. https://en.wikipedia.org/wiki/Carry-lookahead_adder
  91. https://en.wikipedia.org/wiki/Sequential_logic
  92. https://www.youtube.com/watch?v=KM0DdEaY5sY
  93. https://www.youtube.com/watch?v=peCh_859q7Q
  94. https://www.youtube.com/watch?v=F1OC5e7Tn_o
  95. https://www.youtube.com/watch?v=st3mUEub99E
  96. https://www.youtube.com/watch?v=FnxPIZR1ybs
  97. https://en.wikipedia.org/wiki/Arithmetic_logic_unit
  98. https://www.youtube.com/watch?v=mOVOS9AjgFs
  99. http://simulator.io/
 100. https://simulator.io/board/jBA0DN5HQz/3
 101. https://simulator.io/board/A0MeGe4pvm/1
 102. https://simulator.io/board/CZ0EsxYPgm/1
 103. https://simulator.io/board/UtyNctfqc6/1
 104. https://simulator.io/board/ueB4QsoQGV/1
 105. https://simulator.io/samples
 106. https://cs.pwr.edu.pl/zawada/akiso/download/20191108
 107. http://wazniak.mimuw.edu.pl/index.php?title=SOP_lab_nr_7
 108. https://www.win.tue.nl/~aeb/linux/lk/lk-10.html
 109. http://www.geekpills.com/operating-system/linux/the-ultimate-pid-ppid-pgid-process-group-leader-sid-session-leader
 110. https://en.wikipedia.org/wiki/Signal_(IPC)
 111. https://stackoverflow.com/questions/231912/what-is-the-difference-between-sigaction-and-signal
 112. https://books.google.pl/books?id=kCTMFpEcIOwC&pg=PA299#v=onepage&q&f=false
 113. http://poincare.matf.bg.ac.rs/~ivana/courses/ps/sistemi_knjige/pomocno/apue/APUE/0201433079/toc.html
 114. http://poincare.matf.bg.ac.rs/~ivana/courses/ps/sistemi_knjige/pomocno/apue/APUE/0201433079/ch03lev1sec9.html
 115. http://poincare.matf.bg.ac.rs/~ivana/courses/ps/sistemi_knjige/pomocno/apue/APUE/0201433079/ch09.html
 116. http://poincare.matf.bg.ac.rs/~ivana/courses/ps/sistemi_knjige/pomocno/apue/APUE/0201433079/ch10.html
 117. https://cs.pwr.edu.pl/zawada/akiso/lista1.php
 118. https://cs.pwr.edu.pl/zawada/akiso/lista2.php
 119. https://cs.pwr.edu.pl/zawada/akiso/lista3.php
 120. https://cs.pwr.edu.pl/zawada/akiso/lista4.php
 121. https://cs.pwr.edu.pl/zawada/akiso/lista5.php
 122. https://cs.pwr.edu.pl/zawada/akiso/lista6.php
 123. https://www.virtualbox.org/
 124. http://www.ubuntu.com/
 125. http://www.ubuntu.com/download/desktop/
 126. https://www.archlinux.org/
 127. https://www.archlinux.org/download/
 128. http://en.wikipedia.org/wiki/BIOS
 129. https://en.wikipedia.org/wiki/Unified_Extensible_Firmware_Interface
 130. http://en.wikipedia.org/wiki/GUID_Partition_Table
 131. http://en.wikipedia.org/wiki/Master_Boot_Record
 132. http://en.wikipedia.org/wiki/Fdisk
 133. https://pl.wikipedia.org/wiki/System_plików
 134. https://www.youtube.com/results?search_query=archlinux+install
 135. https://wiki.archlinux.org/index.php/Installation_guide
 136. https://web.archive.org/web/20190410192608/http://www.cs.columbia.edu/~jae/4118-LAST/arch-setup-2018-1.html
 137. http://pl.wikipedia.org/wiki/Subversion
 138. http://marie.js.org/
 139. http://marie.js.org/
 140. https://github.com/mathewmariani/MARIE-Examples
 141. https://marie.js.org/?multiply
 142. http://marie.js.org/
 143. http://pl.wikipedia.org/wiki/Subversion
 144. http://ascii-table.com/ansi-escape-sequences.php
 145. http://pl.wikipedia.org/wiki/Subversion
 146. https://github.com/amanusk/s-tui
 147. https://github.com/tgraf/bmon
 148. http://tldp.org/HOWTO/Bash-Prompt-HOWTO/x405.html
 149. https://www.ibm.com/developerworks/aix/library/au-learningtput/?S_TACT=105AGY06&
 150. http://www.restapitutorial.com/
 151. http://www.icndb.com/api/
 152. http://thecatapi.com/
 153. https://en.wikipedia.org/wiki/ASCII_art
 154. https://github.com/posva/catimg
 155. https://github.com/sleeping-h/playing-with-bash/blob/master/arkanoid.sh
 156. https://en.wikipedia.org/wiki/Pong
 157. https://wiki.archlinux.org/index.php/Xterm
 158. https://wiki.archlinux.org/index.php/Rxvt-unicode
 159. https://wiki.archlinux.org/index.php/Termite
 160. https://wiki.archlinux.org/index.php/St
 161. https://en.wikipedia.org/wiki/GNOME_Terminal
 162. https://en.wikipedia.org/wiki/Linux_console
 163. https://wiki.archlinux.org/index.php/Category:Terminal_emulators
 164. http://validator.w3.org/check?uri=referer
 165. http://jigsaw.w3.org/css-validator/check/referer
